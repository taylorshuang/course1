{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface","program":"/home/shuang/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","sp_wasm_interface","--edition=2018","/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"std\"","--cfg","feature=\"wasmi\"","-C","metadata=65e17e6e6cfc5dad","-C","extra-filename=-65e17e6e6cfc5dad","--out-dir","/home/shuang/project/course5/substrate-node-template-transfer-claim/pallets/template/target/rls/debug/deps","-L","dependency=/home/shuang/project/course5/substrate-node-template-transfer-claim/pallets/template/target/rls/debug/deps","--extern","impl_trait_for_tuples=/home/shuang/project/course5/substrate-node-template-transfer-claim/pallets/template/target/rls/debug/deps/libimpl_trait_for_tuples-f82fa7ef92f977f5.so","--extern","codec=/home/shuang/project/course5/substrate-node-template-transfer-claim/pallets/template/target/rls/debug/deps/libparity_scale_codec-82cf01292b2737e4.rmeta","--extern","sp_std=/home/shuang/project/course5/substrate-node-template-transfer-claim/pallets/template/target/rls/debug/deps/libsp_std-418d35f07a66cda9.rmeta","--extern","wasmi=/home/shuang/project/course5/substrate-node-template-transfer-claim/pallets/template/target/rls/debug/deps/libwasmi-08449f1b3bee0106.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/shuang/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/shuang/project/course5/substrate-node-template-transfer-claim/pallets/template/target/rls/debug/deps/libsp_wasm_interface-65e17e6e6cfc5dad.rmeta"},"prelude":{"crate_id":{"name":"sp_wasm_interface","disambiguator":[1333710280556752891,5822633513417739624]},"crate_root":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src","external_crates":[{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15256637969148649584,12170509131058075833]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2572959971889902175,17506693968225989007]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7380289047210505863,13821127130725723065]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15494144285296940423,1517275930380298805]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16074686111301742862,11174094882134223101]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9848143689052418189,5596786287495938678]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4765876764407181064,11122159180720543906]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3249135693812064660,5763443684941168569]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17048817722375060837,16920886256309599893]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13552797903376776722,10482089333731059857]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5989449439605467183,7256304997069434828]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13279369789493161905,12463804053127379464]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[295047501211602818,3843164955111373824]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14781020588812023641,7393321088923443539]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1927264790928947756,6617054577979570835]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[7597657085106642381,11470551509849691989]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[2355022556203982070,155364045674250901]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[3046834347757213021,4625500188193743608]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":19,"id":{"name":"sp_std","disambiguator":[2682330704443012759,7066719197896240899]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":20,"id":{"name":"parity_scale_codec","disambiguator":[9863673375670885385,13575924348645702016]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":21,"id":{"name":"parity_scale_codec_derive","disambiguator":[12287734400278992213,9757486750001437063]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":22,"id":{"name":"arrayvec","disambiguator":[10892931398947536880,12549142608372466002]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":23,"id":{"name":"byte_slice_cast","disambiguator":[709702439622045722,10712509937866309499]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":24,"id":{"name":"serde","disambiguator":[1013328755442281475,12414158929771731165]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":25,"id":{"name":"serde_derive","disambiguator":[18017531714661946146,12785885005030363355]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","num":26,"id":{"name":"impl_trait_for_tuples","disambiguator":[117060539399528790,7764638478372359332]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","num":27,"id":{"name":"wasmi","disambiguator":[13589826167754890772,9239933373639075900]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","num":28,"id":{"name":"memory_units","disambiguator":[6195364841199565730,12036049212193333628]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","num":29,"id":{"name":"parity_wasm","disambiguator":[4160865230177925414,9613519101215907930]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","num":30,"id":{"name":"wasmi_validation","disambiguator":[3489260205587041387,4895180464374019527]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","num":31,"id":{"name":"num_rational","disambiguator":[5751089981592618285,6971262963064967597]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","num":32,"id":{"name":"num_bigint","disambiguator":[7115601650226780755,10679174397042849356]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","num":33,"id":{"name":"num_integer","disambiguator":[11647050115317718423,8118656174663800100]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","num":34,"id":{"name":"num_traits","disambiguator":[468258127332996008,10301193667755463888]}},{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","num":35,"id":{"name":"libc","disambiguator":[14817762749095948147,11358055470431825968]}}],"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":686,"byte_end":13653,"line_start":18,"line_end":509,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":686,"byte_end":13653,"line_start":18,"line_end":509,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":49},{"krate":0,"index":159},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":179},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":207},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":213},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":71},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":236},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":100},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":131},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":259},{"krate":0,"index":264},{"krate":0,"index":270},{"krate":0,"index":277},{"krate":0,"index":285},{"krate":0,"index":294},{"krate":0,"index":304},{"krate":0,"index":315},{"krate":0,"index":327},{"krate":0,"index":340},{"krate":0,"index":354},{"krate":0,"index":369},{"krate":0,"index":385},{"krate":0,"index":402},{"krate":0,"index":420},{"krate":0,"index":439},{"krate":0,"index":459},{"krate":0,"index":480},{"krate":0,"index":502},{"krate":0,"index":525},{"krate":0,"index":549},{"krate":0,"index":574},{"krate":0,"index":600},{"krate":0,"index":627},{"krate":0,"index":655},{"krate":0,"index":684},{"krate":0,"index":714},{"krate":0,"index":745},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":777},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":785},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":795},{"krate":0,"index":797},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":805},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":815},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":817},{"krate":0,"index":823},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":830},{"krate":0,"index":836},{"krate":0,"index":842},{"krate":0,"index":155},{"krate":0,"index":157}],"decl_id":null,"docs":" Types and traits for interfacing between the host and the wasm runtime.\n","sig":null,"attributes":[{"value":"/ Types and traits for interfacing between the host and the wasm runtime.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":686,"byte_end":761,"line_start":18,"line_end":18,"column_start":1,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":49},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1025,"byte_end":1031,"line_start":32,"line_end":32,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"result::Result<T, String>","parent":null,"children":[],"decl_id":null,"docs":" Result type used by traits in this crate.\n","sig":null,"attributes":[{"value":"/ Result type used by traits in this crate.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":946,"byte_end":991,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":992,"byte_end":1015,"line_start":31,"line_end":31,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":160},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1315,"byte_end":1318,"line_start":40,"line_end":40,"column_start":2,"column_end":5},"name":"I32","qualname":"::ValueType::I32","value":"ValueType::I32","parent":{"krate":0,"index":159},"children":[],"decl_id":null,"docs":" An `i32` value type.\n","sig":null,"attributes":[{"value":"/ An `i32` value type.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1289,"byte_end":1313,"line_start":39,"line_end":39,"column_start":2,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":162},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1347,"byte_end":1350,"line_start":42,"line_end":42,"column_start":2,"column_end":5},"name":"I64","qualname":"::ValueType::I64","value":"ValueType::I64","parent":{"krate":0,"index":159},"children":[],"decl_id":null,"docs":" An `i64` value type.\n","sig":null,"attributes":[{"value":"/ An `i64` value type.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1321,"byte_end":1345,"line_start":41,"line_end":41,"column_start":2,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":164},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1379,"byte_end":1382,"line_start":44,"line_end":44,"column_start":2,"column_end":5},"name":"F32","qualname":"::ValueType::F32","value":"ValueType::F32","parent":{"krate":0,"index":159},"children":[],"decl_id":null,"docs":" An `f32` value type.\n","sig":null,"attributes":[{"value":"/ An `f32` value type.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1353,"byte_end":1377,"line_start":43,"line_end":43,"column_start":2,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":166},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1411,"byte_end":1414,"line_start":46,"line_end":46,"column_start":2,"column_end":5},"name":"F64","qualname":"::ValueType::F64","value":"ValueType::F64","parent":{"krate":0,"index":159},"children":[],"decl_id":null,"docs":" An `f64` value type.\n","sig":null,"attributes":[{"value":"/ An `f64` value type.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1385,"byte_end":1409,"line_start":45,"line_end":45,"column_start":2,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":159},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1276,"byte_end":1285,"line_start":38,"line_end":38,"column_start":10,"column_end":19},"name":"ValueType","qualname":"::ValueType","value":"pub enum ValueType { I32, I64, F32, F64, }","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166}],"decl_id":null,"docs":" Value types supported by Substrate on the boundary between host/Wasm.\n","sig":null,"attributes":[{"value":"/ Value types supported by Substrate on the boundary between host/Wasm.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1148,"byte_end":1221,"line_start":36,"line_end":36,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":180},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2050,"byte_end":2053,"line_start":78,"line_end":78,"column_start":2,"column_end":5},"name":"I32","qualname":"::Value::I32","value":"Value::I32(i32)","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" A 32-bit integer.\n","sig":null,"attributes":[{"value":"/ A 32-bit integer.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2027,"byte_end":2048,"line_start":77,"line_end":77,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":183},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2084,"byte_end":2087,"line_start":80,"line_end":80,"column_start":2,"column_end":5},"name":"I64","qualname":"::Value::I64","value":"Value::I64(i64)","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" A 64-bit integer.\n","sig":null,"attributes":[{"value":"/ A 64-bit integer.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2061,"byte_end":2082,"line_start":79,"line_end":79,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":186},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2223,"byte_end":2226,"line_start":84,"line_end":84,"column_start":2,"column_end":5},"name":"F32","qualname":"::Value::F32","value":"Value::F32(u32)","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" A 32-bit floating-point number stored as raw bit pattern.","sig":null,"attributes":[{"value":"/ A 32-bit floating-point number stored as raw bit pattern.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2095,"byte_end":2156,"line_start":81,"line_end":81,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2158,"byte_end":2161,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ You can materialize this value using `f32::from_bits`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2163,"byte_end":2221,"line_start":83,"line_end":83,"column_start":2,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":189},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2362,"byte_end":2365,"line_start":88,"line_end":88,"column_start":2,"column_end":5},"name":"F64","qualname":"::Value::F64","value":"Value::F64(u64)","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" A 64-bit floating-point number stored as raw bit pattern.","sig":null,"attributes":[{"value":"/ A 64-bit floating-point number stored as raw bit pattern.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2234,"byte_end":2295,"line_start":85,"line_end":85,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2297,"byte_end":2300,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ You can materialize this value using `f64::from_bits`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2302,"byte_end":2360,"line_start":87,"line_end":87,"column_start":2,"column_end":60}}]},{"kind":"Enum","id":{"krate":0,"index":179},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2018,"byte_end":2023,"line_start":76,"line_end":76,"column_start":10,"column_end":15},"name":"Value","qualname":"::Value","value":"pub enum Value { I32(i32), I64(i64), F32(u32), F64(u64), }","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":189}],"decl_id":null,"docs":" Values supported by Substrate on the boundary between host/Wasm.\n","sig":null,"attributes":[{"value":"/ Values supported by Substrate on the boundary between host/Wasm.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1869,"byte_end":1937,"line_start":74,"line_end":74,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2433,"byte_end":2443,"line_start":93,"line_end":93,"column_start":9,"column_end":19},"name":"value_type","qualname":"<Value>::value_type","value":"pub fn value_type(&Self) -> ValueType","parent":null,"children":[],"decl_id":null,"docs":" Returns the type of this value.\n","sig":null,"attributes":[{"value":"/ Returns the type of this value.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2389,"byte_end":2424,"line_start":92,"line_end":92,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2670,"byte_end":2676,"line_start":103,"line_end":103,"column_start":9,"column_end":15},"name":"as_i32","qualname":"<Value>::as_i32","value":"pub fn as_i32(&Self) -> Option<i32>","parent":null,"children":[],"decl_id":null,"docs":" Return `Self` as `i32`.\n","sig":null,"attributes":[{"value":"/ Return `Self` as `i32`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2634,"byte_end":2661,"line_start":102,"line_end":102,"column_start":2,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":60},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2893,"byte_end":2899,"line_start":113,"line_end":113,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":65},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3097,"byte_end":3108,"line_start":124,"line_end":124,"column_start":11,"column_end":22},"name":"PointerType","qualname":"::PointerType","value":"PointerType: Sized + private::Sealed","parent":null,"children":[{"krate":0,"index":66}],"decl_id":null,"docs":" Something that can be wrapped in a wasm `Pointer`.","sig":null,"attributes":[{"value":"/ Something that can be wrapped in a wasm `Pointer`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3002,"byte_end":3056,"line_start":121,"line_end":121,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3057,"byte_end":3060,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3061,"byte_end":3086,"line_start":123,"line_end":123,"column_start":1,"column_end":26}}]},{"kind":"Const","id":{"krate":0,"index":66},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3178,"byte_end":3182,"line_start":126,"line_end":126,"column_start":8,"column_end":12},"name":"SIZE","qualname":"::PointerType::SIZE","value":"u32","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" The size of the type in wasm.\n","sig":null,"attributes":[{"value":"/ The size of the type in wasm.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3137,"byte_end":3170,"line_start":125,"line_end":125,"column_start":2,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":213},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3445,"byte_end":3452,"line_start":136,"line_end":136,"column_start":12,"column_end":19},"name":"Pointer","qualname":"::Pointer","value":"Pointer {  }","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216}],"decl_id":null,"docs":" Type to represent a pointer in wasm at the host.\n","sig":null,"attributes":[{"value":"/ Type to represent a pointer in wasm at the host.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3336,"byte_end":3388,"line_start":134,"line_end":134,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3591,"byte_end":3594,"line_start":143,"line_end":143,"column_start":9,"column_end":12},"name":"new","qualname":"<Pointer<T>>::new","value":"pub fn new(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `Self`.\n","sig":null,"attributes":[{"value":"/ Create a new instance of `Self`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3546,"byte_end":3582,"line_start":142,"line_end":142,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3913,"byte_end":3919,"line_start":155,"line_end":155,"column_start":9,"column_end":15},"name":"offset","qualname":"<Pointer<T>>::offset","value":"pub fn offset(Self, u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Calculate the offset from this pointer.","sig":null,"attributes":[{"value":"/ Calculate the offset from this pointer.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3673,"byte_end":3716,"line_start":150,"line_end":150,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3718,"byte_end":3721,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ `offset` is in units of `T`. So, `3` means `3 * mem::size_of::<T>()` as offset to the pointer.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3723,"byte_end":3821,"line_start":152,"line_end":152,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3823,"byte_end":3826,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ Returns an `Option` to respect that the pointer could probably overflow.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3828,"byte_end":3904,"line_start":154,"line_end":154,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":4139,"byte_end":4143,"line_start":165,"line_end":165,"column_start":9,"column_end":13},"name":"null","qualname":"<Pointer<T>>::null","value":"pub fn null() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a null pointer.\n","sig":null,"attributes":[{"value":"/ Create a null pointer.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":4104,"byte_end":4130,"line_start":164,"line_end":164,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":4244,"byte_end":4248,"line_start":170,"line_end":170,"column_start":9,"column_end":13},"name":"cast","qualname":"<Pointer<T>>::cast","value":"pub fn cast<R: PointerType>(Self) -> Pointer<R>","parent":null,"children":[],"decl_id":null,"docs":" Cast this pointer of type `T` to a pointer of type `R`.\n","sig":null,"attributes":[{"value":"/ Cast this pointer of type `T` to a pointer of type `R`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":4176,"byte_end":4235,"line_start":169,"line_end":169,"column_start":2,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":99},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5160,"byte_end":5168,"line_start":214,"line_end":214,"column_start":10,"column_end":18},"name":"WordSize","qualname":"::WordSize","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The word size used in wasm. Normally known as `usize` in Rust.\n","sig":null,"attributes":[{"value":"/ The word size used in wasm. Normally known as `usize` in Rust.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5084,"byte_end":5150,"line_start":213,"line_end":213,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":236},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5259,"byte_end":5268,"line_start":218,"line_end":218,"column_start":12,"column_end":21},"name":"Signature","qualname":"::Signature","value":"Signature { args, return_value }","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238}],"decl_id":null,"docs":" The Signature of a function\n","sig":null,"attributes":[{"value":"/ The Signature of a function","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5177,"byte_end":5208,"line_start":216,"line_end":216,"column_start":1,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":237},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5310,"byte_end":5314,"line_start":220,"line_end":220,"column_start":6,"column_end":10},"name":"args","qualname":"::Signature::args","value":"std::borrow::Cow<'static, [ValueType]>","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" The arguments of a function.\n","sig":null,"attributes":[{"value":"/ The arguments of a function.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5272,"byte_end":5304,"line_start":219,"line_end":219,"column_start":2,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":238},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5394,"byte_end":5406,"line_start":222,"line_end":222,"column_start":6,"column_end":18},"name":"return_value","qualname":"::Signature::return_value","value":"std::option::Option<ValueType>","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" The optional return value of a function.\n","sig":null,"attributes":[{"value":"/ The optional return value of a function.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5344,"byte_end":5388,"line_start":221,"line_end":221,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5498,"byte_end":5501,"line_start":227,"line_end":227,"column_start":9,"column_end":12},"name":"new","qualname":"<Signature>::new","value":"pub fn new<T: Into<Cow>>(T, Option<ValueType>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `Signature`.\n","sig":null,"attributes":[{"value":"/ Create a new instance of `Signature`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5448,"byte_end":5489,"line_start":226,"line_end":226,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5748,"byte_end":5761,"line_start":235,"line_end":235,"column_start":9,"column_end":22},"name":"new_with_args","qualname":"<Signature>::new_with_args","value":"pub fn new_with_args<T: Into<Cow>>(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `Signature` with the given `args` and without any return value.\n","sig":null,"attributes":[{"value":"/ Create a new instance of `Signature` with the given `args` and without any return value.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5647,"byte_end":5739,"line_start":234,"line_end":234,"column_start":2,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":105},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5979,"byte_end":5997,"line_start":245,"line_end":245,"column_start":11,"column_end":29},"name":"MaybeRefUnwindSafe","qualname":"::MaybeRefUnwindSafe","value":"MaybeRefUnwindSafe: std::panic::RefUnwindSafe","parent":null,"children":[],"decl_id":null,"docs":" A trait that requires `RefUnwindSafe` when `feature = std`.\n","sig":null,"attributes":[{"value":"/ A trait that requires `RefUnwindSafe` when `feature = std`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5881,"byte_end":5944,"line_start":243,"line_end":243,"column_start":1,"column_end":64}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5945,"byte_end":5968,"line_start":244,"line_end":244,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":108},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6404,"byte_end":6412,"line_start":256,"line_end":256,"column_start":11,"column_end":19},"name":"Function","qualname":"::Function","value":"Function: MaybeRefUnwindSafe + Send + Sync","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111}],"decl_id":null,"docs":" Something that provides a function implementation on the host for a wasm function.\n","sig":null,"attributes":[{"value":"/ Something that provides a function implementation on the host for a wasm function.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6307,"byte_end":6393,"line_start":255,"line_end":255,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6493,"byte_end":6497,"line_start":258,"line_end":258,"column_start":5,"column_end":9},"name":"name","qualname":"::Function::name","value":"pub fn name(&Self) -> &str","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" Returns the name of this function.\n","sig":null,"attributes":[{"value":"/ Returns the name of this function.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6450,"byte_end":6488,"line_start":257,"line_end":257,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6563,"byte_end":6572,"line_start":260,"line_end":260,"column_start":5,"column_end":14},"name":"signature","qualname":"::Function::signature","value":"pub fn signature(&Self) -> Signature","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" Returns the signature of this function.\n","sig":null,"attributes":[{"value":"/ Returns the signature of this function.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6515,"byte_end":6558,"line_start":259,"line_end":259,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6651,"byte_end":6658,"line_start":262,"line_end":262,"column_start":5,"column_end":12},"name":"execute","qualname":"::Function::execute","value":"pub fn execute(&Self, &mut dyn FunctionContext,\n               &mut dyn Iterator<Item = Value>) -> Result<Option<Value>>","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" Execute this function with the given arguments.\n","sig":null,"attributes":[{"value":"/ Execute this function with the given arguments.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6595,"byte_end":6646,"line_start":261,"line_end":261,"column_start":2,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":114},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7037,"byte_end":7052,"line_start":276,"line_end":276,"column_start":11,"column_end":26},"name":"FunctionContext","qualname":"::FunctionContext","value":"FunctionContext","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120}],"decl_id":null,"docs":" Context used by `Function` to interact with the allocator and the memory of the wasm instance.\n","sig":null,"attributes":[{"value":"/ Context used by `Function` to interact with the allocator and the memory of the wasm instance.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6928,"byte_end":7026,"line_start":275,"line_end":275,"column_start":1,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7106,"byte_end":7117,"line_start":278,"line_end":278,"column_start":5,"column_end":16},"name":"read_memory","qualname":"::FunctionContext::read_memory","value":"pub fn read_memory(&Self, Pointer<u8>, WordSize) -> Result<Vec<u8>>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Read memory from `address` into a vector.\n","sig":null,"attributes":[{"value":"/ Read memory from `address` into a vector.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7056,"byte_end":7101,"line_start":277,"line_end":277,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7348,"byte_end":7364,"line_start":284,"line_end":284,"column_start":5,"column_end":21},"name":"read_memory_into","qualname":"::FunctionContext::read_memory_into","value":"pub fn read_memory_into(&Self, Pointer<u8>, &mut [u8]) -> Result<()>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Read memory into the given `dest` buffer from `address`.\n","sig":null,"attributes":[{"value":"/ Read memory into the given `dest` buffer from `address`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7283,"byte_end":7343,"line_start":283,"line_end":283,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7486,"byte_end":7498,"line_start":286,"line_end":286,"column_start":5,"column_end":17},"name":"write_memory","qualname":"::FunctionContext::write_memory","value":"pub fn write_memory(&mut Self, Pointer<u8>, &[u8]) -> Result<()>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Write the given data at `address` into the memory.\n","sig":null,"attributes":[{"value":"/ Write the given data at `address` into the memory.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7427,"byte_end":7481,"line_start":285,"line_end":285,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7613,"byte_end":7628,"line_start":288,"line_end":288,"column_start":5,"column_end":20},"name":"allocate_memory","qualname":"::FunctionContext::allocate_memory","value":"pub fn allocate_memory(&mut Self, WordSize) -> Result<Pointer<u8>>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Allocate a memory instance of `size` bytes.\n","sig":null,"attributes":[{"value":"/ Allocate a memory instance of `size` bytes.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7561,"byte_end":7608,"line_start":287,"line_end":287,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7725,"byte_end":7742,"line_start":290,"line_end":290,"column_start":5,"column_end":22},"name":"deallocate_memory","qualname":"::FunctionContext::deallocate_memory","value":"pub fn deallocate_memory(&mut Self, Pointer<u8>) -> Result<()>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Deallocate a given memory instance.\n","sig":null,"attributes":[{"value":"/ Deallocate a given memory instance.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7681,"byte_end":7720,"line_start":289,"line_end":289,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7828,"byte_end":7835,"line_start":292,"line_end":292,"column_start":5,"column_end":12},"name":"sandbox","qualname":"::FunctionContext::sandbox","value":"pub fn sandbox(&mut Self) -> &mut dyn Sandbox","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Provides access to the sandbox.\n","sig":null,"attributes":[{"value":"/ Provides access to the sandbox.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7788,"byte_end":7823,"line_start":291,"line_end":291,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":121},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7911,"byte_end":7919,"line_start":296,"line_end":296,"column_start":10,"column_end":18},"name":"MemoryId","qualname":"::MemoryId","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Sandbox memory identifier.\n","sig":null,"attributes":[{"value":"/ Sandbox memory identifier.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7871,"byte_end":7901,"line_start":295,"line_end":295,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":122},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7989,"byte_end":7996,"line_start":299,"line_end":299,"column_start":11,"column_end":18},"name":"Sandbox","qualname":"::Sandbox","value":"Sandbox","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130}],"decl_id":null,"docs":" Something that provides access to the sandbox.\n","sig":null,"attributes":[{"value":"/ Something that provides access to the sandbox.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":7928,"byte_end":7978,"line_start":298,"line_end":298,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":8092,"byte_end":8102,"line_start":301,"line_end":301,"column_start":5,"column_end":15},"name":"memory_get","qualname":"::Sandbox::memory_get","value":"pub fn memory_get(&mut Self, MemoryId, WordSize, Pointer<u8>, WordSize)\n-> Result<u32>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Get sandbox memory from the `memory_id` instance at `offset` into the given buffer.\n","sig":null,"attributes":[{"value":"/ Get sandbox memory from the `memory_id` instance at `offset` into the given buffer.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":8000,"byte_end":8087,"line_start":300,"line_end":300,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":8274,"byte_end":8284,"line_start":309,"line_end":309,"column_start":5,"column_end":15},"name":"memory_set","qualname":"::Sandbox::memory_set","value":"pub fn memory_set(&mut Self, MemoryId, WordSize, Pointer<u8>, WordSize)\n-> Result<u32>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Set sandbox memory from the given value.\n","sig":null,"attributes":[{"value":"/ Set sandbox memory from the given value.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":8225,"byte_end":8269,"line_start":308,"line_end":308,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":8441,"byte_end":8456,"line_start":317,"line_end":317,"column_start":5,"column_end":20},"name":"memory_teardown","qualname":"::Sandbox::memory_teardown","value":"pub fn memory_teardown(&mut Self, MemoryId) -> Result<()>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Delete a memory instance.\n","sig":null,"attributes":[{"value":"/ Delete a memory instance.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":8407,"byte_end":8436,"line_start":316,"line_end":316,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":8634,"byte_end":8644,"line_start":320,"line_end":320,"column_start":5,"column_end":15},"name":"memory_new","qualname":"::Sandbox::memory_new","value":"pub fn memory_new(&mut Self, u32, u32) -> Result<MemoryId>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Create a new memory instance with the given `initial` size and the `maximum` size.\n The size is given in wasm pages.\n","sig":null,"attributes":[{"value":"/ Create a new memory instance with the given `initial` size and the `maximum` size.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":8505,"byte_end":8591,"line_start":318,"line_end":318,"column_start":2,"column_end":88}},{"value":"/ The size is given in wasm pages.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":8593,"byte_end":8629,"line_start":319,"line_end":319,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":8753,"byte_end":8759,"line_start":322,"line_end":322,"column_start":5,"column_end":11},"name":"invoke","qualname":"::Sandbox::invoke","value":"pub fn invoke(&mut Self, u32, &str, &[u8], Pointer<u8>, WordSize, u32)\n-> Result<u32>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Invoke an exported function by a name.\n","sig":null,"attributes":[{"value":"/ Invoke an exported function by a name.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":8706,"byte_end":8748,"line_start":321,"line_end":321,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":8954,"byte_end":8971,"line_start":332,"line_end":332,"column_start":5,"column_end":22},"name":"instance_teardown","qualname":"::Sandbox::instance_teardown","value":"pub fn instance_teardown(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Delete a sandbox instance.\n","sig":null,"attributes":[{"value":"/ Delete a sandbox instance.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":8919,"byte_end":8949,"line_start":331,"line_end":331,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":9056,"byte_end":9068,"line_start":334,"line_end":334,"column_start":5,"column_end":17},"name":"instance_new","qualname":"::Sandbox::instance_new","value":"pub fn instance_new(&mut Self, u32, &[u8], &[u8], u32) -> Result<u32>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Create a new sandbox instance.\n","sig":null,"attributes":[{"value":"/ Create a new sandbox instance.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":9017,"byte_end":9051,"line_start":333,"line_end":333,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":9388,"byte_end":9402,"line_start":346,"line_end":346,"column_start":5,"column_end":19},"name":"get_global_val","qualname":"::Sandbox::get_global_val","value":"pub fn get_global_val(&Self, u32, &str) -> Result<Option<Value>>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Get the value from a global with the given `name`. The sandbox is determined by the\n given `instance_idx` instance.","sig":null,"attributes":[{"value":"/ Get the value from a global with the given `name`. The sandbox is determined by the","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":9181,"byte_end":9268,"line_start":342,"line_end":342,"column_start":2,"column_end":89}},{"value":"/ given `instance_idx` instance.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":9270,"byte_end":9304,"line_start":343,"line_end":343,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":9306,"byte_end":9309,"line_start":344,"line_end":344,"column_start":2,"column_end":5}},{"value":"/ Returns `Some(_)` when the requested global variable could be found.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":9311,"byte_end":9383,"line_start":345,"line_end":345,"column_start":2,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":131},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":9544,"byte_end":9557,"line_start":350,"line_end":350,"column_start":11,"column_end":24},"name":"HostFunctions","qualname":"::HostFunctions","value":"HostFunctions: 'static","parent":null,"children":[{"krate":0,"index":132}],"decl_id":null,"docs":" Something that provides implementations for host functions.\n","sig":null,"attributes":[{"value":"/ Something that provides implementations for host functions.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":9470,"byte_end":9533,"line_start":349,"line_end":349,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":9622,"byte_end":9636,"line_start":352,"line_end":352,"column_start":5,"column_end":19},"name":"host_functions","qualname":"::HostFunctions::host_functions","value":"pub fn host_functions() -> Vec<&'static dyn Function>","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Returns the host functions `Self` provides.\n","sig":null,"attributes":[{"value":"/ Returns the host functions `Self` provides.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":9570,"byte_end":9617,"line_start":351,"line_end":351,"column_start":2,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":133},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":10017,"byte_end":10026,"line_start":367,"line_end":367,"column_start":11,"column_end":20},"name":"IntoValue","qualname":"::IntoValue","value":"IntoValue","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135}],"decl_id":null,"docs":" Something that can be converted into a wasm compatible `Value`.\n","sig":null,"attributes":[{"value":"/ Something that can be converted into a wasm compatible `Value`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":9939,"byte_end":10006,"line_start":366,"line_end":366,"column_start":1,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":134},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":10072,"byte_end":10082,"line_start":369,"line_end":369,"column_start":8,"column_end":18},"name":"VALUE_TYPE","qualname":"::IntoValue::VALUE_TYPE","value":"ValueType","parent":{"krate":0,"index":133},"children":[],"decl_id":null,"docs":" The type of the value in wasm.\n","sig":null,"attributes":[{"value":"/ The type of the value in wasm.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":10030,"byte_end":10064,"line_start":368,"line_end":368,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":10141,"byte_end":10151,"line_start":372,"line_end":372,"column_start":5,"column_end":15},"name":"into_value","qualname":"::IntoValue::into_value","value":"pub fn into_value(Self) -> Value","parent":{"krate":0,"index":133},"children":[],"decl_id":null,"docs":" Convert `self` into a wasm `Value`.\n","sig":null,"attributes":[{"value":"/ Convert `self` into a wasm `Value`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":10097,"byte_end":10136,"line_start":371,"line_end":371,"column_start":2,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":136},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":10240,"byte_end":10252,"line_start":376,"line_end":376,"column_start":11,"column_end":23},"name":"TryFromValue","qualname":"::TryFromValue","value":"TryFromValue: Sized","parent":null,"children":[{"krate":0,"index":137}],"decl_id":null,"docs":" Something that can may be created from a wasm `Value`.\n","sig":null,"attributes":[{"value":"/ Something that can may be created from a wasm `Value`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":10171,"byte_end":10229,"line_start":375,"line_end":375,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":10317,"byte_end":10331,"line_start":378,"line_end":378,"column_start":5,"column_end":19},"name":"try_from_value","qualname":"::TryFromValue::try_from_value","value":"pub fn try_from_value(Value) -> Option<Self>","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Try to convert the given `Value` into `Self`.\n","sig":null,"attributes":[{"value":"/ Try to convert the given `Value` into `Self`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":10263,"byte_end":10312,"line_start":377,"line_end":377,"column_start":2,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":139},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":11073,"byte_end":11087,"line_start":417,"line_end":417,"column_start":11,"column_end":25},"name":"WritePrimitive","qualname":"::WritePrimitive","value":"WritePrimitive<T: PointerType>","parent":null,"children":[{"krate":0,"index":141}],"decl_id":null,"docs":" Something that can write a primitive to wasm memory location.\n","sig":null,"attributes":[{"value":"/ Something that can write a primitive to wasm memory location.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":10997,"byte_end":11062,"line_start":416,"line_end":416,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":11177,"byte_end":11192,"line_start":419,"line_end":419,"column_start":5,"column_end":20},"name":"write_primitive","qualname":"::WritePrimitive::write_primitive","value":"pub fn write_primitive(&mut Self, Pointer<T>, T) -> Result<()>","parent":{"krate":0,"index":139},"children":[],"decl_id":null,"docs":" Write the given value `t` to the given memory location `ptr`.\n","sig":null,"attributes":[{"value":"/ Write the given value `t` to the given memory location `ptr`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":11107,"byte_end":11172,"line_start":418,"line_end":418,"column_start":2,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":146},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":11722,"byte_end":11735,"line_start":437,"line_end":437,"column_start":11,"column_end":24},"name":"ReadPrimitive","qualname":"::ReadPrimitive","value":"ReadPrimitive<T: PointerType>","parent":null,"children":[{"krate":0,"index":148}],"decl_id":null,"docs":" Something that can read a primitive from a wasm memory location.\n","sig":null,"attributes":[{"value":"/ Something that can read a primitive from a wasm memory location.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":11643,"byte_end":11711,"line_start":436,"line_end":436,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":11818,"byte_end":11832,"line_start":439,"line_end":439,"column_start":5,"column_end":19},"name":"read_primitive","qualname":"::ReadPrimitive::read_primitive","value":"pub fn read_primitive(&Self, Pointer<T>) -> Result<T>","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Read a primitive from the given memory location `ptr`.\n","sig":null,"attributes":[{"value":"/ Read a primitive from the given memory location `ptr`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":11755,"byte_end":11813,"line_start":438,"line_end":438,"column_start":2,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":818},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12575,"byte_end":12579,"line_start":464,"line_end":464,"column_start":2,"column_end":6},"name":"Unit","qualname":"::ReturnValue::Unit","value":"ReturnValue::Unit","parent":{"krate":0,"index":817},"children":[],"decl_id":null,"docs":" For returning nothing.\n","sig":null,"attributes":[{"value":"/ For returning nothing.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12547,"byte_end":12573,"line_start":463,"line_end":463,"column_start":2,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":820},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12622,"byte_end":12627,"line_start":466,"line_end":466,"column_start":2,"column_end":7},"name":"Value","qualname":"::ReturnValue::Value","value":"ReturnValue::Value(Value)","parent":{"krate":0,"index":817},"children":[],"decl_id":null,"docs":" For returning some concrete value.\n","sig":null,"attributes":[{"value":"/ For returning some concrete value.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12582,"byte_end":12620,"line_start":465,"line_end":465,"column_start":2,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":817},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12532,"byte_end":12543,"line_start":462,"line_end":462,"column_start":10,"column_end":21},"name":"ReturnValue","qualname":"::ReturnValue","value":"pub enum ReturnValue { Unit, Value(Value), }","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":820}],"decl_id":null,"docs":" Typed value that can be returned from a function.","sig":null,"attributes":[{"value":"/ Typed value that can be returned from a function.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12316,"byte_end":12369,"line_start":458,"line_end":458,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12370,"byte_end":12373,"line_start":459,"line_end":459,"column_start":1,"column_end":4}},{"value":"/ Basically a `TypedValue` plus `Unit`, for functions which return nothing.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12374,"byte_end":12451,"line_start":460,"line_end":460,"column_start":1,"column_end":78}}]},{"kind":"Const","id":{"krate":0,"index":158},"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":13039,"byte_end":13055,"line_start":482,"line_end":482,"column_start":12,"column_end":28},"name":"ENCODED_MAX_SIZE","qualname":"::ReturnValue::ENCODED_MAX_SIZE","value":"usize","parent":{"krate":0,"index":157},"children":[],"decl_id":null,"docs":" Maximum number of bytes `ReturnValue` might occupy when serialized with `SCALE`.","sig":null,"attributes":[{"value":"/ Maximum number of bytes `ReturnValue` might occupy when serialized with `SCALE`.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12760,"byte_end":12844,"line_start":476,"line_end":476,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12846,"byte_end":12849,"line_start":477,"line_end":477,"column_start":2,"column_end":5}},{"value":"/ Breakdown:","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12851,"byte_end":12865,"line_start":478,"line_end":478,"column_start":2,"column_end":16}},{"value":"/  1 byte for encoding unit/value variant","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12867,"byte_end":12910,"line_start":479,"line_end":479,"column_start":2,"column_end":45}},{"value":"/  1 byte for encoding value type","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12912,"byte_end":12947,"line_start":480,"line_end":480,"column_start":2,"column_end":37}},{"value":"/  8 bytes for encoding the biggest value types available in wasm: f64, i64.","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12949,"byte_end":13027,"line_start":481,"line_end":481,"column_start":2,"column_end":80}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":14482,"byte_end":14494,"line_start":22,"line_end":22,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":14757,"byte_end":14762,"line_start":33,"line_end":33,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15092,"byte_end":15101,"line_start":44,"line_end":44,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15327,"byte_end":15336,"line_start":55,"line_end":55,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15597,"byte_end":15606,"line_start":66,"line_end":66,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15818,"byte_end":15827,"line_start":73,"line_end":73,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1640,"byte_end":1649,"line_start":60,"line_end":60,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2380,"byte_end":2385,"line_start":91,"line_end":91,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3532,"byte_end":3539,"line_start":141,"line_end":141,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":4353,"byte_end":4360,"line_start":175,"line_end":175,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":4774,"byte_end":4781,"line_start":199,"line_end":199,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":4935,"byte_end":4942,"line_start":204,"line_end":204,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5435,"byte_end":5444,"line_start":225,"line_end":225,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6110,"byte_end":6111,"line_start":247,"line_end":247,"column_start":59,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12660,"byte_end":12671,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12745,"byte_end":12756,"line_start":475,"line_end":475,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":14482,"byte_end":14494,"line_start":22,"line_end":22,"column_start":29,"column_end":41},"kind":{"Impl":{"id":0}},"from":{"krate":27,"index":3060},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":14757,"byte_end":14762,"line_start":33,"line_end":33,"column_start":36,"column_end":41},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":179},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15092,"byte_end":15101,"line_start":44,"line_end":44,"column_start":33,"column_end":42},"kind":{"Impl":{"id":2}},"from":{"krate":27,"index":3035},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15327,"byte_end":15336,"line_start":55,"line_end":55,"column_start":33,"column_end":42},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":159},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15597,"byte_end":15606,"line_start":66,"line_end":66,"column_start":33,"column_end":42},"kind":{"Impl":{"id":4}},"from":{"krate":27,"index":3021},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15818,"byte_end":15827,"line_start":73,"line_end":73,"column_start":34,"column_end":43},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":236},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":1640,"byte_end":1649,"line_start":60,"line_end":60,"column_start":39,"column_end":48},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":159},"to":{"krate":2,"index":2766}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":2380,"byte_end":2385,"line_start":91,"line_end":91,"column_start":6,"column_end":11},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":179},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3110,"byte_end":3115,"line_start":124,"line_end":124,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":65}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3127,"byte_end":3133,"line_start":124,"line_end":124,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":60},"to":{"krate":0,"index":65}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":3532,"byte_end":3539,"line_start":141,"line_end":141,"column_start":22,"column_end":29},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":213},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":4353,"byte_end":4360,"line_start":175,"line_end":175,"column_start":36,"column_end":43},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":213},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":4774,"byte_end":4781,"line_start":199,"line_end":199,"column_start":36,"column_end":43},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":213},"to":{"krate":0,"index":133}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":4935,"byte_end":4942,"line_start":204,"line_end":204,"column_start":39,"column_end":46},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":213},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":5435,"byte_end":5444,"line_start":225,"line_end":225,"column_start":6,"column_end":15},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6011,"byte_end":6024,"line_start":245,"line_end":245,"column_start":43,"column_end":56},"kind":"SuperTrait","from":{"krate":1,"index":6431},"to":{"krate":0,"index":105}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6110,"byte_end":6111,"line_start":247,"line_end":247,"column_start":59,"column_end":60},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":107},"to":{"krate":0,"index":105}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6414,"byte_end":6432,"line_start":256,"line_end":256,"column_start":21,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":105},"to":{"krate":0,"index":108}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6435,"byte_end":6439,"line_start":256,"line_end":256,"column_start":42,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":2853},"to":{"krate":0,"index":108}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":6442,"byte_end":6446,"line_start":256,"line_end":256,"column_start":49,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":2865},"to":{"krate":0,"index":108}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":10254,"byte_end":10259,"line_start":376,"line_end":376,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12660,"byte_end":12671,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":817},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/shuang/.cargo/git/checkouts/substrate-7e08433d4c370a21/70ef0af/primitives/wasm-interface/src/lib.rs","byte_start":12745,"byte_end":12756,"line_start":475,"line_end":475,"column_start":6,"column_end":17},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":817},"to":{"krate":4294967295,"index":4294967295}}]}